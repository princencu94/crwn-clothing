{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyA6_-AXuJYTfS68E5ENmxdc662yM5CI1qc\",\n  authDomain: \"crwn-clothing-c637c.firebaseapp.com\",\n  databaseURL: \"https://crwn-clothing-c637c.firebaseio.com\",\n  projectId: \"crwn-clothing-c637c\",\n  storageBucket: \"crwn-clothing-c637c.appspot.com\",\n  messagingSenderId: \"1053890277277\",\n  appId: \"1:1053890277277:web:f7a58a0c62f5347fc58974\",\n  measurementId: \"G-1BC175CDKL\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const created_At = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        created_At,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('Error creating User', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionsRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newObjRef = collectionsRef.doc();\n    batch.set(newObjRef, obj);\n  });\n  return await batch.commit();\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const convertCollectionsArrayToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/MRKT/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","created_At","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionsRef","collection","batch","forEach","obj","newObjRef","commit","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","convertCollectionsArrayToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","initializeApp","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyA6_-AXuJYTfS68E5ENmxdc662yM5CI1qc\",\r\n    authDomain: \"crwn-clothing-c637c.firebaseapp.com\",\r\n    databaseURL: \"https://crwn-clothing-c637c.firebaseio.com\",\r\n    projectId: \"crwn-clothing-c637c\",\r\n    storageBucket: \"crwn-clothing-c637c.appspot.com\",\r\n    messagingSenderId: \"1053890277277\",\r\n    appId: \"1:1053890277277:web:f7a58a0c62f5347fc58974\",\r\n    measurementId: \"G-1BC175CDKL\"\r\n  };\r\n\r\n  export const createUserProfileDocument = async(userAuth, additionalData) => {\r\n    if(!userAuth) return;\r\n\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n    const snapShot = await userRef.get();\r\n\r\n    if(!snapShot.exists) {\r\n      const {displayName, email} = userAuth;\r\n      const created_At = new Date();\r\n\r\n      try {\r\n        await userRef.set({\r\n          displayName,\r\n          email,\r\n          created_At,\r\n          ...additionalData\r\n        })\r\n      } catch(error) {\r\n        console.log('Error creating User', error.message);\r\n      }\r\n    }\r\n    return userRef;\r\n  }\r\n\r\n  export const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\r\n    const collectionsRef = firestore.collection(collectionKey);\r\n    \r\n    const batch = firestore.batch();\r\n\r\n    objectsToAdd.forEach(obj => {\r\n      const newObjRef = collectionsRef.doc();\r\n      batch.set(newObjRef, obj);\r\n    });\r\n\r\n   return await batch.commit();\r\n  };\r\n\r\n  export const getCurrentUser = () => {\r\n    return new Promise((resolve, reject) => {\r\n      const unsubscribe = auth.onAuthStateChanged(userAuth => {\r\n        unsubscribe();\r\n        resolve(userAuth);\r\n      }, reject);\r\n    });\r\n  };\r\n\r\n  export const convertCollectionsArrayToMap = (collections) => {\r\n    const transformedCollection = collections.docs.map(doc => {\r\n      const {title, items} = doc.data();\r\n\r\n      return {\r\n          routeName : encodeURI(title.toLowerCase()),\r\n          id: doc.id,\r\n          title,\r\n          items\r\n      }\r\n    })\r\n    return transformedCollection.reduce((accumulator, collection) => {\r\n      accumulator[collection.title.toLowerCase()] = collection;\r\n      return accumulator;\r\n    }, {});\r\n  }\r\n\r\n  firebase.initializeApp(config);\r\n\r\n  export const auth = firebase.auth();\r\n  export const firestore = firebase.firestore();\r\n\r\n  export const googleProvider = new firebase.auth.GoogleAuthProvider();\r\n  googleProvider.setCustomParameters({prompt: 'select_account'});\r\n  export const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\r\n\r\n  export default firebase;\r\n\r\n"]},"metadata":{},"sourceType":"module"}